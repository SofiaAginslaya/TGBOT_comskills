# communication skills progress
from telegram import ParseMode
from telegram.ext import Updater, MessageHandler, Filters, CommandHandler
from telegram import ReplyKeyboardMarkup
from settings import TG_TOKEN
import sqlite3


MAIN_MENU = [["–≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"], ["–æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"], ["–∞–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞", "–º–æ—Ç–∏–≤–∞—Ü–∏—è"]]
MENU_MANY_WORDS = [["–¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞"], ["–¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –¥–∏–∫—Ü–∏–∏"],
                   ["–¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏"], ["–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
PART_OF_SPEECH = [["–∏–º–µ–Ω–∞\n—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ", "–∏–º–µ–Ω–∞\n–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ"], ["–≥–ª–∞–≥–æ–ª—ã"],
                  ["–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "–ø–æ–∑–≤–∞—Ç—å Sofia"]]


def start(update, context):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!üëã –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.\n\n–ú–æ–∂–µ—à—å –Ω–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—è Sofia! :)",
        reply_markup=ReplyKeyboardMarkup(MAIN_MENU, one_time_keyboard=False, resize_keyboard=True))


def sofia(update, context):
    update.message.reply_text("–Ø —Ç—É—Ç! –ß–µ–º –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?)",
                              reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))


def all_ex(update, context):
    update.message.reply_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:",
                              reply_markup=ReplyKeyboardMarkup(MENU_MANY_WORDS, resize_keyboard=True))
    global value
    value = 0


def many_words(update, context):
    update.message.reply_text("–í—ã–±–µ—Ä–µ—Ç–µ, –Ω–∞–¥ –∫–∞–∫–æ–π —á–∞—Å—Ç—å—é —Ä–µ—á–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∏–∑–¥–µ–≤–∞—Ç—å—Å—è)) :",
                              reply_markup=ReplyKeyboardMarkup(PART_OF_SPEECH, resize_keyboard=True))


def goals_many_words(update, context):
    con = sqlite3.connect("bd_tgbot_comskills.db")
    cursor = con.cursor()
    global letter
    letter = "".join(update.message.text.split())
    print(letter)
    goal = cursor.execute(f"""
    SELECT goal, how_to_do, frequency FROM parts_of_speech WHERE part_of_sp = "{letter}" """).fetchone()
    update.message.reply_text("*–¶–µ–ª—å:* \n‚òë _" + goal[0] + "_", parse_mode=ParseMode.MARKDOWN,
                              reply_markup=ReplyKeyboardMarkup([["–Ω–∞—á–∞—Ç—å", "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]],
                                                               resize_keyboard=True))
    update.message.reply_text("*–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å:* \nüÜô" + goal[1], parse_mode=ParseMode.MARKDOWN)
    update.message.reply_text("üÖ∞üÖ±üÖæüÖ±üÖ∞\n–ü–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –Ω–µ–ª—å–∑—è‚ùó\n–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"
                              " –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.\n‚≠ï–î–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ _–≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç_ "
                              "—Å–ª–æ–≤–∞ –∏–∑ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞‚≠ï", parse_mode=ParseMode.MARKDOWN)
    update.message.reply_text("*–ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* \n‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ\n" + goal[2] + "\n‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ", parse_mode=ParseMode.MARKDOWN)
    con.close()


def set_timer_for_many_words(update, context):
    chat_id = update.message.chat_id
    due = 60  # –∑–∞—Å–µ–∫–∞–µ–º –º–∏–Ω—É—Ç—É
    context.job_queue.run_once(task, due, context=chat_id, name=str(chat_id))
    text = "*–∑–∞—Å–µ–∫–ª–∞ –º–∏–Ω—É—Ç—É\nüü£–ù–∞—á–∏–Ω–∞–π –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Å–ª–æ–≤–êüü£"
    global updated
    updated = update
    update.message.reply_text(text,
                              reply_markup=ReplyKeyboardMarkup([['—Å–ª–æ–≤–æ+']],
                                                               resize_keyboard=True))


def task(context):
    text = "‚ùó–ú–∏–Ω—É—Ç–∞ –ø—Ä–æ—à–ª–ê‚ùó\n*–¶–µ–ª—å:*\n‚úÖ_–≤—ã–ø–æ–ª–Ω–µ–Ω–∞_‚úÖ"
    updated.message.reply_text(text, parse_mode=ParseMode.MARKDOWN,
                               reply_markup=ReplyKeyboardMarkup([['–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']], resize_keyboard=True))
    res, text = know_result_many_words()
    updated.message.reply_text("*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!*üëá\n_–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:_ " + str(res), parse_mode=ParseMode.MARKDOWN)
    updated.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

    con = sqlite3.connect("bd_tgbot_comskills.db")
    cursor = con.cursor()
    query = f'''INSERT INTO counters_and_marks({letter}) VALUES(?)'''
    cursor.execute(query, (res,))
    con.commit()
    con.close()


def plus_one(update, context):
    global value
    value += 1


def know_result_many_words():
    con = sqlite3.connect("bd_tgbot_comskills.db")
    cursor = con.cursor()
    result = cursor.execute(f"SELECT {letter} FROM counters_and_marks").fetchall()
    summa, kolvo = 0, 0
    for i in result:
        if i[0] != None:
            summa += int(i[0])
            kolvo += 1
    if value < (summa / kolvo):
        return value,\
               "–¢—ã —Å–∫–∞–∑–∞–ª –º–µ–Ω—å—à–µ —Å–ª–æ–≤, —á–µ–º –≥–æ–≤–æ—Ä—è—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º. –ù–æ —è —É–≤–µ—Ä–µ–Ω–∞, —ç—Ç–æ _*–Ω–µ* –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç_!!!üíú"
    else:
        return value,  "–¢—ã —Å–∫–∞–∑–∞–ª –±–æ–ª—å—à–µ —Å–ª–æ–≤, —á–µ–º –≥–æ–≤–æ—Ä—è—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º. –ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! _–î–∞–ª—å—à–µ - –±–æ–ª—å—à–µ_üíú"
    con.close()


def be_back_to_the_main_menu(update, context):
    update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                              reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))


def be_back_to_the_menu_many_words(update, context):
    update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.",
                              reply_markup=ReplyKeyboardMarkup(MENU_MANY_WORDS, resize_keyboard=True))
    global value
    value = 0


def main():
    updater = Updater(TG_TOKEN, use_context=True)

    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex("–Ω–∞—á–Ω–µ–º!"), start))
    dp.add_handler(CommandHandler("Sofia", sofia))
    dp.add_handler(MessageHandler(Filters.regex("Sofia"), sofia))

    dp.add_handler(CommandHandler("all_ex", all_ex))
    dp.add_handler(MessageHandler(Filters.regex("–≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"), all_ex))
    dp.add_handler(CommandHandler("many_words", many_words))
    dp.add_handler(MessageHandler(Filters.regex("—Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞"), many_words))
    dp.add_handler(CommandHandler("noun", goals_many_words))
    dp.add_handler(MessageHandler(Filters.regex("–∏–º–µ–Ω–∞\n—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ"), goals_many_words))
    dp.add_handler(CommandHandler("adjs", goals_many_words))
    dp.add_handler(MessageHandler(Filters.regex("–∏–º–µ–Ω–∞\n–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ"), goals_many_words))
    dp.add_handler(CommandHandler("verbs", goals_many_words))
    dp.add_handler(MessageHandler(Filters.regex("–≥–ª–∞–≥–æ–ª—ã"), goals_many_words))
    dp.add_handler(CommandHandler("timer_for_many_words", set_timer_for_many_words))
    dp.add_handler(MessageHandler(Filters.regex("–Ω–∞—á–∞—Ç—å"), set_timer_for_many_words))
    dp.add_handler(MessageHandler(Filters.regex("—Å–ª–æ–≤–æ+"), plus_one))

    dp.add_handler(CommandHandler("be_back_mm", be_back_to_the_main_menu))
    dp.add_handler(MessageHandler(Filters.regex("–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), be_back_to_the_main_menu))
    dp.add_handler(CommandHandler("be_back", be_back_to_the_menu_many_words))
    dp.add_handler(MessageHandler(Filters.regex("–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), be_back_to_the_menu_many_words))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
