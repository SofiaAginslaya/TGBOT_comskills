# –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
from telegram import ParseMode, ReplyKeyboardMarkup
import main_csp

global value
value = 0


def many_words(update, context):
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å —Ä–µ—á–∏:",
                              reply_markup=ReplyKeyboardMarkup(main_csp.PART_OF_SPEECH, resize_keyboard=True))


def goals_many_words(update, context):
    con, cursor = main_csp.get_cursor()
    global letter
    letter = "".join(update.message.text.split())
    print(letter)
    goal = cursor.execute(f"""
    SELECT goal, how_to_do, frequency FROM parts_of_speech WHERE part_of_sp = "{letter}" """).fetchone()
    update.message.reply_text("*–¶–µ–ª—å:* \n‚òë _" + goal[0] + "_", parse_mode=ParseMode.MARKDOWN)
    update.message.reply_text("*–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å:* \nüÜô" + goal[1], parse_mode=ParseMode.MARKDOWN)
    update.message.reply_text("üÖ∞üÖ±üÖæüÖ±üÖ∞\n–ü–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –Ω–µ–ª—å–∑—è‚ùó\n–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"
                              " –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.\n‚≠ï–î–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ _–≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç_ "
                              "—Å–ª–æ–≤–∞ –∏–∑ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞‚≠ï", parse_mode=ParseMode.MARKDOWN)
    update.message.reply_text("*–ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* \n‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ\n" + goal[2] + "\n‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ‚ôæ",
                              parse_mode=ParseMode.MARKDOWN,
                              reply_markup=ReplyKeyboardMarkup([["–Ω–∞—á–Ω–µ–º!"], ["üîô–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô"]],
                                                               resize_keyboard=True))
    con.close()


def set_timer_for_many_words(update, context):
    chat_id = update.message.chat_id
    due = 60  # –∑–∞—Å–µ–∫–∞–µ–º –º–∏–Ω—É—Ç—É
    context.job_queue.run_once(task, due, context=chat_id, name=str(chat_id))
    text = "*–∑–∞—Å–µ–∫–ª–∞ –º–∏–Ω—É—Ç—É\nüü£–ù–∞—á–∏–Ω–∞–π –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Å–ª–æ–≤–êüü£"
    global updated
    updated = update
    update.message.reply_text(text,
                              reply_markup=ReplyKeyboardMarkup([["–ø–ª—é—Å"]],
                                                               resize_keyboard=True))


def task(context):
    text = "‚ùó–ú–∏–Ω—É—Ç–∞ –ø—Ä–æ—à–ª–ê‚ùó\n*–¶–µ–ª—å:*\n‚úÖ_–≤—ã–ø–æ–ª–Ω–µ–Ω–∞_‚úÖ"
    updated.message.reply_text(text, parse_mode=ParseMode.MARKDOWN,
                               reply_markup=ReplyKeyboardMarkup([['üîô–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô']], resize_keyboard=True))
    res, text = know_result_many_words()
    updated.message.reply_text("*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!*üëá\n_–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:_ " + str(res), parse_mode=ParseMode.MARKDOWN)
    updated.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

    con, cursor = main_csp.get_cursor()
    query = f'''INSERT INTO counters_and_marks({letter}) VALUES(?)'''
    cursor.execute(query, (res,))
    con.commit()
    con.close()


def plus_one(update, context):
    global value
    value += 1


def know_result_many_words():
    con, cursor = main_csp.get_cursor()
    result = cursor.execute(f"SELECT {letter} FROM counters_and_marks").fetchall()
    summa, kolvo = main_csp.counter_comparison(result)
    con.close()
    if value < (summa / kolvo):
        return value,\
               "–í—ã —Å–∫–∞–∑–∞–ª–∏ –º–µ–Ω—å—à–µ —Å–ª–æ–≤, —á–µ–º –≥–æ–≤–æ—Ä—è—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º. –ù–æ —è —É–≤–µ—Ä–µ–Ω–∞, —ç—Ç–æ _–Ω–µ–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç_!!!üíú"
    else:
        return value,  "–í—ã —Å–∫–∞–∑–∞–ª–∏ –±–æ–ª—å—à–µ —Å–ª–æ–≤, —á–µ–º –≥–æ–≤–æ—Ä—è—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º. –ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! _–î–∞–ª—å—à–µ - –±–æ–ª—å—à–µ_üíú"


def be_back_to_the_menu_many_words(update, context):
    update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥:",
                              reply_markup=ReplyKeyboardMarkup(main_csp.MENU_MANY_WORDS, resize_keyboard=True))
    global value
    value = 0
